use sha2::{Sha256, Digest};
use argon2::{Argon2, PasswordHasher, password_hash::SaltString};
use serde::{Serialize, Deserialize};
use std::time::{SystemTime, UNIX_EPOCH};
use std::collections::HashMap;
use std::fs::{File, OpenOptions};
use std::io::{Write, Read};
use std::net::{TcpListener, TcpStream};
use std::thread;
use std::sync::{Arc, Mutex};
use rand::Rng;
use blake3; // Faster hashing for state

const SHARD_COUNT: u64 = 640;
const TARGET_TPS: usize = 1_000_000;
const BLOCK_TIME: f64 = 1.0; // ~1s target for high-spec, ~60s for low-spec

#[derive(Serialize, Deserialize, Debug, Clone)]
struct Transaction {
    sender: String,
    receiver: String,
    amount: u64,
    contract: Option<Vec<u8>>, // Mini-EVM bytecode
    gas: u64,                  // Gas limit
}

#[derive(Serialize, Deserialize, Debug, Clone)]
struct Block {
    shard_id: u64,
    prev_hash: String,
    transactions: Vec<Transaction>,
    timestamp: u64,
    nonce: u64,
    hash: String,
    merkle_root: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Shard {
    blocks: Vec<Block>,
    balances: HashMap<String, u64>,
    state: HashMap<String, Vec<u8>>, // Contract storage
}

struct GrokChain {
    shards: Vec<Shard>,
    poh_chain: String, // PoH global ordering
    peers: Vec<String>,
    shard_threads: Vec<thread::JoinHandle<()>>,
}

impl GrokChain {
    fn new(peers: Vec<String>) -> Self {
        let mut shards = Vec::new();
        for i in 0..SHARD_COUNT {
            shards.push(Shard {
                blocks: vec![Self::genesis_block(i)],
                balances: HashMap::new(),
                state: HashMap::new(),
            });
        }
        let poh = Self::init_poh();
        let mut chain = GrokChain {
            shards,
            poh_chain: poh,
            peers,
            shard_threads: Vec::new(),
        };
        chain.start_shard_threads();
        chain
    }

    fn genesis_block(shard_id: u64) -> Block {
        Block {
            shard_id,
            prev_hash: "0".to_string(),
            transactions: Vec::new(),
            timestamp: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
            nonce: 0,
            hash: format!("00genesis{}", shard_id),
            merkle_root: "0".to_string(),
        }
    }

    fn init_poh() -> String {
        let mut hasher = Sha256::new();
        hasher.update(b"GrokChain 10x Initial PoH");
        format!("{:x}", hasher.finalize())
    }

    fn mine_block(shards: &[Shard], shard_id: u64, txs: Vec<Transaction>, poh: &str) -> Block {
        let shard = &shards[shard_id as usize];
        let prev_block = shard.blocks.last().unwrap();
        let prev_hash = prev_block.hash.clone();
        let timestamp = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();
        let mut nonce = rand::thread_rng().gen_range(0..1000); // Random start for fairness
        let data = bincode::serialize(&txs).unwrap();
        let salt = SaltString::generate(&mut rand::thread_rng());
        let argon2 = Argon2::default();
        let merkle_root = Self::compute_merkle_root(&txs);

        loop {
            let hash_input = format!("{}{}{}{}", prev_hash, timestamp, nonce, poh);
            let hash = argon2.hash_password(hash_input.as_bytes(), &salt).unwrap();
            let hash_str = hash.to_string();
            if hash_str.starts_with("0") { // Ultra-low difficulty for ~1-min blocks on low-spec
                return Block {
                    shard_id,
                    prev_hash,
                    transactions: txs.clone(),
                    timestamp,
                    nonce,
                    hash: hash_str,
                    merkle_root,
                };
            }
            nonce += 1;
        }
    }

    fn compute_merkle_root(txs: &[Transaction]) -> String {
        if txs.is_empty() {
            return "0".to_string();
        }
        let mut hashes: Vec<String> = txs
            .iter()
            .map(|tx| format!("{:x}", blake3::hash(&bincode::serialize(tx).unwrap())))
            .collect();
        while hashes.len() > 1 {
            let mut new_hashes = Vec::new();
            for chunk in hashes.chunks(2) {
                let combined = if chunk.len() == 2 {
                    chunk[0].clone() + &chunk[1]
                } else {
                    chunk[0].clone()
                };
                new_hashes.push(format!("{:x}", blake3::hash(combined.as_bytes())));
            }
            hashes = new_hashes;
        }
        hashes[0].clone()
    }

    fn update_poh(&mut self, block_hash: &str) {
        let mut hasher = Sha256::new();
        hasher.update(format!("{}{}", self.poh_chain, block_hash));
        self.poh_chain = format!("{:x}", hasher.finalize());
    }

    fn process_tx(&mut self, shard_id: u64, tx: Transaction) -> bool {
        let shard = &mut self.shards[shard_id as usize];
        let sender_bal = shard.balances.entry(tx.sender.clone()).or_insert(10000); // Initial stake
        let total_cost = tx.amount + tx.gas; // Gas as fee
        if *sender_bal < total_cost || tx.gas > 10000 {
            return false;
        }
        *sender_bal -= total_cost;
        let receiver_bal = shard.balances.entry(tx.receiver.clone()).or_insert(0);
        *receiver_bal += tx.amount;

        if let Some(code) = tx.contract {
            return self.execute_contract(shard_id, code, tx.amount, tx.gas);
        }
        true
    }

    fn execute_contract(&mut self, shard_id: u64, code: Vec<u8>, value: u64, gas: u64) -> bool {
        let shard = &mut self.shards[shard_id as usize];
        let mut gas_used = 0;
        let mut pc = 0; // Program counter
        while pc < code.len() {
            let op = code[pc];
            gas_used += 1;
            if gas_used > gas {
                return false; // Out of gas
            }
            match op {
                0x01 => { // ADD_VALUE: Deposit to "Contract"
                    shard.balances.entry("Contract".to_string()).and_modify(|b| *b += value).or_insert(value);
                }
                0x02 => { // STORE: Save value to state
                    shard.state.insert("data".to_string(), vec![value as u8]);
                }
                0x03 => { // TRANSFER: Move value to sender
                    let bal = shard.balances.entry("Contract".to_string()).or_insert(0);
                    if *bal >= value {
                        *bal -= value;
                        shard.balances.entry("User".to_string()).and_modify(|b| *b += value).or_insert(value);
                    }
                }
                _ => (), // Skip invalid opcodes
            }
            pc += 1;
        }
        gas_used <= gas
    }

    fn save_state(&self) -> std::io::Result<()> {
        let data = bincode::serialize(&self.shards)?;
        let mut file = OpenOptions::new()
            .write(true)
            .create(true)
            .truncate(true)
            .open("grokchain_10x_state.bin")?;
        file.write_all(&data)?;
        Ok(())
    }

    fn load_state(&mut self) -> std::io::Result<()> {
        let mut file = File::open("grokchain_10x_state.bin")?;
        let mut buffer = Vec::new();
        file.read_to_end(&mut buffer)?;
        self.shards = bincode::deserialize(&buffer).unwrap_or_else(|_| self.shards.clone());
        Ok(())
    }

    fn broadcast_block(&self, block: Block) {
        for peer in &self.peers {
            if let Ok(mut stream) = TcpStream::connect(peer) {
                let data = bincode::serialize(&block).unwrap();
                let _ = stream.write_all(&data); // Ignore errors for now
            }
        }
    }

    fn start_shard_threads(&mut self) {
        let chain = Arc::new(Mutex::new(self.clone()));
        for shard_id in 0..SHARD_COUNT {
            let chain = chain.clone();
            let poh = self.poh_chain.clone();
            let handle = thread::spawn(move || {
                let mut rng = rand::thread_rng();
                loop {
                    let txs = vec![Transaction {
                        sender: "User".to_string(),
                        receiver: format!("Other{}", shard_id),
                        amount: rng.gen_range(1..10),
                        contract: None,
                        gas: 100,
                    }];
                    let mut chain_guard = chain.lock().unwrap();
                    let block = Self::mine_block(&chain_guard.shards, shard_id, txs.clone(), &poh);
                    chain_guard.shards[shard_id as usize].blocks.push(block.clone());
                    chain_guard.update_poh(&block.hash);
                    chain_guard.broadcast_block(block);
                    drop(chain_guard); // Release lock
                    thread::sleep(std::time::Duration::from_millis(100)); // Simulate block time
                }
            });
            self.shard_threads.push(handle);
        }
    }
}

impl Clone for GrokChain {
    fn clone(&self) -> Self {
        GrokChain {
            shards: self.shards.clone(),
            poh_chain: self.poh_chain.clone(),
            peers: self.peers.clone(),
            shard_threads: Vec::new(), // Threads not cloned
        }
    }
}

fn run_p2p_server(chain: Arc<Mutex<GrokChain>>) {
    let listener = TcpListener::bind("127.0.0.1:9000").unwrap();
    for stream in listener.incoming() {
        let mut stream = stream.unwrap();
        let mut buffer = Vec::new();
        if stream.read_to_end(&mut buffer).is_ok() {
            if let Ok(block) = bincode::deserialize::<Block>(&buffer) {
                let mut chain = chain.lock().unwrap();
                let shard = &mut chain.shards[block.shard_id as usize];
                if shard.blocks.last().unwrap().hash == block.prev_hash {
                    shard.blocks.push(block.clone());
                    chain.update_poh(&block.hash);
                }
            }
        }
    }
}

fn main() {
    let peers = vec!["127.0.0.1:9001".to_string()];
    let chain = Arc::new(Mutex::new(GrokChain::new(peers)));
    let chain_clone = chain.clone();

    // Start P2P server
    thread::spawn(move || run_p2p_server(chain_clone));

    let mut chain = chain.lock().unwrap();
    let _ = chain.load_state();
    println!("GrokChain 10x launched - PoH: {}", chain.poh_chain);

    // Test: Mine and process txs
    let txs = vec![
        Transaction {
            sender: "Alice".to_string(),
            receiver: "Bob".to_string(),
            amount: 100,
            contract: None,
            gas: 100,
        },
        Transaction {
            sender: "Bob".to_string(),
            receiver: "Charlie".to_string(),
            amount: 50,
            contract: Some(vec![0x01, 0x02, 0x03]), // Deposit, store, transfer
            gas: 200,
        },
    ];

    println!("Mining block in shard 0...");
    let start = SystemTime::now();
    let block = GrokChain::mine_block(&chain.shards, 0, txs.clone(), &chain.poh_chain);
    chain.shards[0].blocks.push(block.clone());
    chain.broadcast_block(block);
    for tx in txs {
        chain.process_tx(0, tx);
    }
    let elapsed = start.elapsed().unwrap().as_secs_f64();
    println!("Mined block: {:?}", chain.shards[0].blocks.last());
    println!("Time: {:.2}s", elapsed);

    // Simulate 1M TPS test across shards
    let tx_per_shard = TARGET_TPS / SHARD_COUNT as usize; // ~1562 tx/shard
    let mut total_txs = 0;
    let start = SystemTime::now();
    for shard_id in 0..SHARD_COUNT {
        let mut txs = Vec::new();
        for _ in 0..tx_per_shard {
            txs.push(Transaction {
                sender: "User".to_string(),
                receiver: format!("Other{}", shard_id),
                amount: 1,
                contract: None,
                gas: 100,
            });
        }
        let block = GrokChain::mine_block(&chain.shards, shard_id, txs.clone(), &chain.poh_chain);
        chain.shards[shard_id as usize].blocks.push(block);
        for tx in txs {
            if chain.process_tx(shard_id, tx) {
                total_txs += 1;
            }
        }
    }
    let elapsed = start.elapsed().unwrap().as_secs_f64();
    let tps = total_txs as f64 / elapsed;
    println!("Processed {} txs in {:.2}s - TPS: {:.0}", total_txs, elapsed, tps);

    // Check state
    let shard = &chain.shards[0];
    println!(
        "Balances: Alice: {}, Bob: {}, Charlie: {}, Contract: {}, User: {}",
        shard.balances.get("Alice").unwrap_or(&0),
        shard.balances.get("Bob").unwrap_or(&0),
        shard.balances.get("Charlie").unwrap_or(&0),
        shard.balances.get("Contract").unwrap_or(&0),
        shard.balances.get("User").unwrap_or(&0)
    );
    println!("Contract storage: {:?}", shard.state.get("data"));

    let _ = chain.save_state();
}
